{"version":3,"sources":["components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/Farms/components/types.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/ModalInput/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/Tooltip/Tooltip.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/SearchInput.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/components/Select/Select.tsx","views/Farms/Farms.tsx"],"names":["Wrapper","styled","div","theme","colors","primary","ExpandableSectionButton","onClick","expanded","aria-label","role","color","bold","defaultProps","ViewMode","getLiquidityUrlPathParts","quoteTokenAdresses","tokenAddresses","firstPart","process","secondPart","StyledLinkExternal","LinkExternal","text","DetailsSection","bscScanAddress","removed","totalValueFormated","lpLabel","addLiquidityUrl","TranslateString","useI18n","justifyContent","href","external","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","farmImage","tokenSymbol","alignItems","mb","src","alt","width","height","flexDirection","split","variant","StyledTokenInput","input","isWarning","shadows","warning","inset","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","symbol","onChange","onSelectMax","value","inputTitle","isBalanceZero","displayBalance","parseFloat","toFixed","style","position","pl","fontSize","toLocaleString","placeholder","scale","mr","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","useCallback","e","currentTarget","handleSelectMax","title","ModalActions","disabled","a","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","pid","onStake","useStake","onUnstake","useUnstake","rawStakedBalance","getBalanceNumber","useModal","onPresentDeposit","onPresentWithdraw","HarvestAction","earnings","account","useWeb3React","onReward","useHarvest","rawEarningsBalance","Action","CardActions","farm","requestedApproval","setRequestedApproval","useFarmFromSymbol","lpSymbol","lpAddresses","useFarmUser","allowance","lpAddress","getAddress","lpName","toUpperCase","isApproved","isGreaterThan","web3","useWeb3","lpContract","getBep20Contract","onApprove","useApprove","handleApprove","console","error","textTransform","pr","mt","UnlockButton","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","Grid","GridItem","Description","ApyCalculatorModal","apy","times","BigNumber","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","event","stopPropagation","ml","RainbowLight","keyframes","StyledCardAccent","FCard","props","card","background","Divider","borderColor","ExpandingWrapper","FarmCard","bnbPrice","ethPrice","showExpandableSection","setShowExpandableSection","communityFarms","includes","toLocaleLowerCase","totalValue","lpTotalInQuoteToken","quoteTokenSymbol","QuoteToken","BNB","CAKE","ETH","Number","undefined","maximumFractionDigits","replace","earnLabel","dual","farmAPY","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","display","CardActionsContainer","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","IconImage","Image","Farm","image","label","Amount","span","earned","textDisabled","Earned","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","TooltipContent","tooltip","zIndices","modal","Tooltip","content","children","MultiplierWrapper","Multiplier","displayMultipler","toLowerCase","LiquidityWrapper","Liquidity","liquidity","displayLiquidity","ActionContainer","xl","ActionTitles","Title","secondary","Subtle","ActionContent","Staked","userData","earningsBigNumber","usePriceCakeBusd","earningsBusd","multipliedBy","useCountUp","start","end","duration","separator","decimals","countUp","update","updateValue","useRef","useEffect","current","lg","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","apr","bsc","info","name","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","translationId","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","setActionPanelToggled","toggleActionPanel","isXs","tableSchema","columnNames","map","column","Object","keys","key","columnIndex","indexOf","React","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","data","columns","rows","useTable","sortColumn","ref","row","original","scrollIntoView","behavior","FarmTabButtons","useRouteMatch","url","isExact","activeIndex","as","Link","to","InputWrapper","SearchInput","setToggled","inputEl","onBlur","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","TABLE","DropDownHeader","inputSecondary","DropDownListContainer","dropdown","DropDownContainer","isOpen","css","boxShadow","DropDownList","ul","ListItem","li","Select","options","containerRef","dropdownRef","setIsOpen","selectedOption","setSelectedOption","containerSize","setContainerSize","toggling","onOptionClicked","option","offsetWidth","offsetHeight","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledImage","Header","gradients","bubblegum","Farms","path","pathname","useLocation","farmsLP","useFarms","usePriceBnbBusd","query","setQuery","setViewMode","ethPriceUsd","usePriceEthBusd","sortOption","setSortOption","dispatch","useDispatch","fastRefresh","useRefresh","fetchFarmUserDataAsync","stackedOnly","setStackedOnly","activeFarms","filter","inactiveFarms","stackedOnlyFarms","farmsList","farmsToDisplay","cakePriceVsBNB","find","CAKE_POOL_PID","tokenPriceVsQuote","farmsToDisplayWithAPY","tokenAmount","cakeRewardPerBlock","CAKE_PER_BLOCK","poolWeight","cakeRewardPerYear","BLOCKS_PER_YEAR","BUSD","UST","cakeApy","dualApy","rewardPerBlock","plus","lowercaseQuery","isActive","farmsStaked","rowData","farms","orderBy","slice","sortFarms","size","Page","checked","marginLeft","target","length","sort","b","exact","renderContent"],"mappings":"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","file":"static/js/6.776cb432.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  return (\r\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? 'Hide' : 'Details'}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","export type TableProps = {\r\n  data?: TableDataTypes[]\r\n  selectedFilters?: string\r\n  sortBy?: string\r\n  sortDir?: string\r\n  onSort?: (value: string) => void\r\n}\r\n\r\nexport type ColumnsDefTypes = {\r\n  id: number\r\n  label: string\r\n  name: string\r\n  translationId: number\r\n  sortable: boolean\r\n}\r\n\r\nexport type ScrollBarProps = {\r\n  ref: string\r\n  width: number\r\n}\r\n\r\nexport type TableDataTypes = {\r\n  POOL: string\r\n  APY: string\r\n  EARNED: string\r\n  STAKED: string\r\n  DETAILS: string\r\n  LINKS: string\r\n}\r\n\r\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    translationId: 1072,\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    translationId: 736,\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    translationId: 1072,\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    translationId: 736,\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'liquidity',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: 'Liquidity',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'multiplier',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: 'Multiplier',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    translationId: 999,\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport enum ViewMode {\r\n  'TABLE' = 'TABLE',\r\n  'CARD' = 'CARD',\r\n}\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, tokenAddresses }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const firstPart = quoteTokenAdresses[chainId]\r\n  const secondPart = tokenAddresses[chainId]\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport useI18n from 'hooks/useI18n'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface ExpandableSectionProps {\r\n  bscScanAddress?: string\r\n  removed?: boolean\r\n  totalValueFormated?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  text-decoration: none;\r\n  font-weight: normal;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    padding-left: 4px;\r\n    height: 18px;\r\n    width: auto;\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  bscScanAddress,\r\n  removed,\r\n  totalValueFormated,\r\n  lpLabel,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(316, 'Stake')}:</Text>\r\n        <StyledLinkExternal href={addLiquidityUrl}>{lpLabel}</StyledLinkExternal>\r\n      </Flex>\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\r\n          <Text>{totalValueFormated}</Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"flex-start\">\r\n        <Link external href={bscScanAddress} bold={false}>\r\n          {TranslateString(356, 'View on BscScan')}\r\n        </Link>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\r\nimport { CommunityTag, CoreTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  isCommunityFarm,\r\n  farmImage,\r\n  tokenSymbol,\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Image src={`/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\r\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap-libs/uikit'\r\nimport useI18n from '../../hooks/useI18n'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  width: 60px;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst StyledErrorMessage = styled(Text)`\r\n  position: absolute;\r\n  bottom: -22px;\r\n  a {\r\n    display: inline;\r\n  }\r\n`\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  addLiquidityUrl,\r\n  inputTitle,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  const displayBalance = isBalanceZero ? '0' : parseFloat(max).toFixed(4)\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n          <Text fontSize=\"14px\">\r\n            {TranslateString(1120, 'Balance')}: {displayBalance.toLocaleString()}\r\n          </Text>\r\n        </Flex>\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\r\n          <StyledInput onChange={onChange} placeholder=\"0\" value={value} />\r\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\r\n            {TranslateString(452, 'Max')}\r\n          </Button>\r\n          <Text fontSize=\"16px\">{symbol}</Text>\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          No tokens to stake:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {TranslateString(999, 'get')} {symbol}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal, LinkExternal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={TranslateString(1068, 'Stake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={TranslateString(1070, 'Stake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\">\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={pendingTx || fullBalance === '0' || val === '0'}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {TranslateString(999, 'Get')} {tokenName}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={TranslateString(1126, 'Unstake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={TranslateString(588, 'Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\">\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n  const displayBalance = rawStakedBalance.toLocaleString()\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return rawStakedBalance === 0 ? (\r\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake LP')}</Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\r\n          <AddIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useWeb3React } from '@web3-react/core'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const { account } = useWeb3React()\r\n  const TranslateString = useI18n()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n\r\n  const rawEarningsBalance = account ? getBalanceNumber(earnings) : 0\r\n  const displayBalance = rawEarningsBalance.toLocaleString()\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      <Button\r\n        disabled={rawEarningsBalance === 0 || pendingTx}\r\n        onClick={async () => {\r\n          setPendingTx(true)\r\n          await onReward()\r\n          setPendingTx(false)\r\n        }}\r\n      >\r\n        {TranslateString(562, 'Harvest')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBep20Contract } from 'utils/contractHelpers'\r\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { useFarmFromSymbol, useFarmUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useWeb3 from 'hooks/useWeb3'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  provider?: ProviderType\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\r\n  const TranslateString = useI18n()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses } = useFarmFromSymbol(farm.lpSymbol)\r\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const web3 = useWeb3()\r\n\r\n  const lpContract = getBep20Contract(lpAddress, web3)\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={lpName}\r\n        pid={pid}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n      />\r\n    ) : (\r\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\r\n        {TranslateString(758, 'Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\r\n          BBOX\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(1072, 'Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(1074, 'Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\r\n\r\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\r\n  // Everything here is worked out relative to a year, with the asset compounding daily\r\n  const timesCompounded = 365\r\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\r\n  const apyAsDecimal = farmApy / 100\r\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\r\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\r\n  const principal = 1000 / cakePrice\r\n\r\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\r\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\r\n\r\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\r\n  const interestEarned = finalAmount - principal\r\n  return roundToTwoDp(interestEarned)\r\n}\r\n\r\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\r\n  const percentage = (amountEarned / amountInvested) * 100\r\n  return percentage.toFixed(2)\r\n}\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst GridItem = styled.div`\r\n  margin-bottom: '10px';\r\n`\r\n\r\nconst Description = styled(Text)`\r\n  max-width: 320px;\r\n  margin-bottom: 28px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  lpLabel,\r\n  cakePrice,\r\n  apy,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\r\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\r\n\r\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\r\n\r\n  return (\r\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(860, 'Timeframe')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(858, 'ROI')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(864, 'CAKE per $1000')}\r\n          </Text>\r\n        </GridItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>1d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>7d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>30d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem>\r\n          <Text>365d(APY)</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Description fontSize=\"12px\" color=\"textSubtle\">\r\n        {TranslateString(\r\n          866,\r\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\r\n        )}\r\n      </Description>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={addLiquidityUrl}>\r\n          {TranslateString(999, 'Get')} {lpLabel}\r\n        </LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap-libs/uikit'\r\nimport ApyCalculatorModal from './ApyCalculatorModal'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apy, addLiquidityUrl }) => {\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal lpLabel={lpLabel} cakePrice={cakePrice} apy={apy} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\r\n      <CalculateIcon width=\"18px\" />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { communityFarms } from 'config/constants'\r\nimport { Farm } from 'state/types'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n  liquidity?: BigNumber\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n\t0% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n\t50% {\r\n\t\tbackground-position: 100% 50%;\r\n\t}\r\n\t100% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(\r\n    45deg,\r\n    rgba(255, 0, 0, 1) 0%,\r\n    rgba(255, 154, 0, 1) 10%,\r\n    rgba(208, 222, 33, 1) 20%,\r\n    rgba(79, 220, 74, 1) 30%,\r\n    rgba(63, 218, 216, 1) 40%,\r\n    rgba(47, 201, 226, 1) 50%,\r\n    rgba(28, 127, 238, 1) 60%,\r\n    rgba(95, 21, 242, 1) 70%,\r\n    rgba(186, 12, 248, 1) 80%,\r\n    rgba(251, 7, 217, 1) 90%,\r\n    rgba(255, 0, 0, 1) 100%\r\n  );\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 32px;\r\n  filter: blur(6px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 32px;\r\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  bnbPrice?: BigNumber\r\n  ethPrice?: BigNumber\r\n  provider?: ProviderType\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethPrice, account }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n\r\n  const totalValue: BigNumber = useMemo(() => {\r\n    if (!farm.lpTotalInQuoteToken) {\r\n      return null\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n      return cakePrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.ETH) {\r\n      return ethPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    return farm.lpTotalInQuoteToken\r\n  }, [bnbPrice, cakePrice, ethPrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\r\n\r\n  const totalValueFormated = totalValue\r\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'BBOX'\r\n\r\n  const farmAPY =\r\n    farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n\r\n  const { quoteTokenAdresses, tokenAddresses } = farm\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, tokenAddresses })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return (\r\n    <FCard>\r\n      {farm.tokenSymbol === 'BBOX' && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        isCommunityFarm={isCommunityFarm}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.tokenSymbol}\r\n      />\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text>{TranslateString(736, 'APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apy ? (\r\n              <>\r\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apy={farm.apy} />\r\n                {farmAPY}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(318, 'Earn')}:</Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          bscScanAddress={`https://testnet.bscscan.com/address/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`}\r\n          totalValueFormated={totalValueFormated}\r\n          lpLabel={lpLabel}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\r\nimport { Address, QuoteToken } from 'config/constants/types'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nexport interface AprProps {\r\n  value: string\r\n  multiplier: string\r\n  lpLabel: string\r\n  quoteTokenAdresses: Address\r\n  quoteTokenSymbol: QuoteToken\r\n  tokenAddresses: Address\r\n  cakePrice: BigNumber\r\n  originalValue: BigNumber\r\n  hideButton?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.text};\r\n\r\n  button {\r\n    width: 20px;\r\n    height: 20px;\r\n\r\n    svg {\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.textSubtle};\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst AprWrapper = styled.div`\r\n  min-width: 60px;\r\n  text-align: left;\r\n`\r\n\r\nconst Apr: React.FC<AprProps> = ({\r\n  value,\r\n  lpLabel,\r\n  quoteTokenAdresses,\r\n  tokenAddresses,\r\n  cakePrice,\r\n  originalValue,\r\n  hideButton = false,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, tokenAddresses })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  return (\r\n    <Container>\r\n      {originalValue ? (\r\n        <>\r\n          <AprWrapper>{value}%</AprWrapper>\r\n          {!hideButton && (\r\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apy={originalValue} addLiquidityUrl={addLiquidityUrl} />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <AprWrapper>{TranslateString(656, 'Loading...')}</AprWrapper>\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Apr\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useFarmUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { Text, Image } from '@pancakeswap-libs/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\n\r\nexport interface FarmProps {\r\n  label: string\r\n  pid: number\r\n  image: string\r\n}\r\n\r\nconst IconImage = styled(Image)`\r\n  width: 24px;\r\n  height: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 40px;\r\n    height: 40px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  padding-left: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst Farm: React.FunctionComponent<FarmProps> = ({ image, label, pid }) => {\r\n  const { stakedBalance } = useFarmUser(pid)\r\n  const TranslateString = useI18n()\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n\r\n  const handleRenderFarming = (): JSX.Element => {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\r\n          {TranslateString(999, 'FARMING')}\r\n        </Text>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconImage src={`/images/farms/${image}.svg`} alt=\"icon\" width={40} height={40} mr=\"8px\" />\r\n      <div>\r\n        {handleRenderFarming()}\r\n        <Text bold>{label}</Text>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Farm\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\n\r\nexport interface EarnedProps {\r\n  earnings: number\r\n  pid: number\r\n}\r\n\r\nconst Amount = styled.span<{ earned: number }>`\r\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Earned: React.FunctionComponent<EarnedProps> = ({ earnings }) => {\r\n  const { account } = useWeb3React()\r\n  const displayBalance = earnings !== null && account ? earnings.toLocaleString() : '?'\r\n\r\n  return <Amount earned={earnings}>{displayBalance}</Amount>\r\n}\r\n\r\nexport default Earned\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap-libs/uikit'\r\n\r\ninterface DetailsProps {\r\n  actionPanelToggled: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  padding-right: 8px;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-right: 0px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 20px;\r\n`\r\n\r\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\r\n  const { isXl } = useMatchBreakpoints()\r\n  const isMobile = !isXl\r\n\r\n  return (\r\n    <Container>\r\n      {!isMobile && 'Details'}\r\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Details\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport interface TooltipProps {\r\n  content: React.ReactNode\r\n}\r\n\r\nconst TooltipContent = styled.div`\r\n  background: ${({ theme }) => theme.tooltip.background};\r\n  padding: 16px;\r\n  border-radius: 16px;\r\n  color: ${({ theme }) => theme.tooltip.text};\r\n  width: max-content;\r\n  display: none;\r\n  padding: 16px;\r\n  max-height: 500px;\r\n  z-index: ${({ theme }) => theme.zIndices.modal};\r\n  position: absolute;\r\n  bottom: calc(100% + 16px);\r\n  transform: translate(34px, 0);\r\n  right: 0;\r\n  max-width: 246px;\r\n\r\n  &:after {\r\n    content: '';\r\n    display: block;\r\n    width: 0;\r\n    height: 0;\r\n    border-left: 10px solid transparent;\r\n    border-right: 10px solid transparent;\r\n    border-top: 10px solid ${({ theme }) => theme.tooltip.background};\r\n    bottom: 0;\r\n    position: absolute;\r\n    transform: translate(-34px, 9px);\r\n    right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n\r\n  &:hover ${TooltipContent}, &:focus-within ${TooltipContent} {\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst Tooltip: React.FunctionComponent<TooltipProps> = ({ content, children }) => {\r\n  return (\r\n    <Container>\r\n      {children}\r\n      <TooltipContent>{content}</TooltipContent>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Tooltip\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nimport Tooltip from '../Tooltip/Tooltip'\r\n\r\nexport interface MultiplierProps {\r\n  multiplier: string\r\n}\r\n\r\nconst MultiplierWrapper = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  width: 36px;\r\n  text-align: right;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    text-align: left;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    margin-left: 14px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    svg {\r\n      margin-left: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\r\n  const displayMultipler = multiplier ? multiplier.toLowerCase() : '-'\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Container>\r\n      <MultiplierWrapper>{displayMultipler}</MultiplierWrapper>\r\n      <Tooltip\r\n        content={\r\n          <div>\r\n            {TranslateString(999, 'The multiplier represents the amount of CAKE rewards each farm gets.')}\r\n            <br />\r\n            <br />\r\n            {TranslateString(\r\n              999,\r\n              'For example, if a 1x farm was getting 1 CAKE per block, a 40x farm would be getting 40 CAKE per block.',\r\n            )}\r\n          </div>\r\n        }\r\n      >\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </Tooltip>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Multiplier\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nimport Tooltip from '../Tooltip/Tooltip'\r\n\r\nexport interface LiquidityProps {\r\n  liquidity: number\r\n}\r\n\r\nconst LiquidityWrapper = styled.div`\r\n  min-width: 110px;\r\n  font-weight: 600;\r\n  text-align: right;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    text-align: left;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    margin-left: 14px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    svg {\r\n      margin-left: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\r\n  const displayLiquidity = liquidity\r\n    ? `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Container>\r\n      <LiquidityWrapper>\r\n        <Text>{displayLiquidity}</Text>\r\n      </LiquidityWrapper>\r\n      <Tooltip content={TranslateString(999, 'The total value of the funds in this farm’s liquidity pool')}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </Tooltip>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Liquidity\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 48px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  font-weight: 600;\r\n  font-size: 12px;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nexport const Title = styled.span`\r\n  color: ${({ theme }) => theme.colors.secondary};\r\n`\r\n\r\nexport const Subtle = styled.span`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\nexport const Earned = styled.div`\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n`\r\n\r\nexport const Staked = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n`\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Button } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { useCountUp } from 'react-countup'\r\n\r\nimport { ActionContainer, ActionTitles, Title, Subtle, ActionContent, Earned, Staked } from './styles'\r\n\r\nconst HarvestAction: React.FunctionComponent<FarmWithStakedValue> = ({ pid, userData }) => {\r\n  const { account } = useWeb3React()\r\n  const earningsBigNumber = userData && account ? new BigNumber(userData.earnings) : null\r\n  const cakePrice = usePriceCakeBusd()\r\n  let earnings = null\r\n  let earningsBusd = 0\r\n  let displayBalance = '?'\r\n\r\n  if (earningsBigNumber) {\r\n    earnings = getBalanceNumber(earningsBigNumber)\r\n    earningsBusd = new BigNumber(earnings).multipliedBy(cakePrice).toNumber()\r\n    displayBalance = earnings.toLocaleString()\r\n  }\r\n\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n  const TranslateString = useI18n()\r\n\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: earningsBusd,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals: 3,\r\n  })\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(earningsBusd)\r\n  }, [earningsBusd, updateValue])\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Title>CAKE </Title>\r\n        <Subtle>EARNED</Subtle>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Earned>{displayBalance}</Earned>\r\n          <Staked>~{countUp}USD</Staked>\r\n        </div>\r\n        <Button\r\n          disabled={!earnings || pendingTx || !account}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onReward()\r\n            setPendingTx(false)\r\n          }}\r\n          ml=\"4px\"\r\n        >\r\n          {TranslateString(999, 'Harvest')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon } from '@pancakeswap-libs/uikit'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useFarmUser } from 'state/hooks'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport { getBep20Contract } from 'utils/contractHelpers'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport useWeb3 from 'hooks/useWeb3'\r\n\r\nimport DepositModal from '../../DepositModal'\r\nimport WithdrawModal from '../../WithdrawModal'\r\nimport { ActionContainer, ActionTitles, ActionContent, Earned, Title, Subtle } from './styles'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\nconst Staked: React.FunctionComponent<FarmWithStakedValue> = ({\r\n  pid,\r\n  lpSymbol,\r\n  lpAddresses,\r\n  quoteTokenAdresses,\r\n  tokenAddresses,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWeb3React()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n  const web3 = useWeb3()\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, tokenAddresses })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n  const displayBalance = rawStakedBalance.toLocaleString()\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(<WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={lpSymbol} />)\r\n\r\n  const lpContract = getBep20Contract(lpAddress, web3)\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Subtle>{TranslateString(999, 'START FARMING')}</Subtle>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <UnlockButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (isApproved) {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <ActionContainer>\r\n          <ActionTitles>\r\n            <Title>{lpSymbol} </Title>\r\n            <Subtle>{TranslateString(999, 'STAKED')}</Subtle>\r\n          </ActionTitles>\r\n          <ActionContent>\r\n            <div>\r\n              <Earned>{displayBalance}</Earned>\r\n            </div>\r\n            <IconButtonWrapper>\r\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n                <MinusIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n              <IconButton variant=\"secondary\" onClick={onPresentDeposit}>\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            </IconButtonWrapper>\r\n          </ActionContent>\r\n        </ActionContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Subtle>{TranslateString(999, 'STAKE')} </Subtle>\r\n          <Title>{lpSymbol}</Title>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button width=\"100%\" onClick={onPresentDeposit} variant=\"secondary\">\r\n            {TranslateString(999, 'Stake LP')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Subtle>{TranslateString(999, 'ENABLE FARM')}</Subtle>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\r\n          {TranslateString(999, 'Enable')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { LinkExternal, Text } from '@pancakeswap-libs/uikit'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { communityFarms } from 'config/constants'\r\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\r\n\r\nimport HarvestAction from './HarvestAction'\r\nimport StakedAction from './StakedAction'\r\nimport Apr, { AprProps } from '../Apr'\r\nimport Multiplier, { MultiplierProps } from '../Multiplier'\r\nimport Liquidity, { LiquidityProps } from '../Liquidity'\r\n\r\nexport interface ActionPanelProps {\r\n  apr: AprProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n}\r\n\r\nconst Container = styled.div`\r\n  background: ${({ theme }) => theme.colors.background};\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: column-reverse;\r\n  padding: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst StakeContainer = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n  }\r\n`\r\n\r\nconst TagsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 25px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  > div {\r\n    height: 24px;\r\n    padding: 0 6px;\r\n    font-size: 14px;\r\n    margin-right: 4px;\r\n\r\n    svg {\r\n      width: 14px;\r\n    }\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\nconst InfoContainer = styled.div`\r\n  min-width: 200px;\r\n`\r\n\r\nconst ValueContainer = styled.div`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst ValueWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin: 4px 0px;\r\n`\r\n\r\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({ details, apr, multiplier, liquidity }) => {\r\n  const farm = details\r\n\r\n  const TranslateString = useI18n()\r\n  const { quoteTokenAdresses, tokenAddresses, tokenSymbol, dual } = farm\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, tokenAddresses })\r\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const bsc = `https://bscscan.com/address/${lpAddress}`\r\n  const info = `https://pancakeswap.info/pair/${lpAddress}`\r\n  const isCommunityFarm = communityFarms.includes(tokenSymbol)\r\n\r\n  return (\r\n    <Container>\r\n      <InfoContainer>\r\n        <StakeContainer>\r\n          <StyledLinkExternal href={`https://bboxdex.netlify.app/#/add/${liquidityUrlPathParts}`}>\r\n            {TranslateString(999, `Get ${lpLabel}`, { name: lpLabel })}\r\n          </StyledLinkExternal>\r\n        </StakeContainer>\r\n        <StyledLinkExternal href={bsc}>{TranslateString(999, 'View Contract')}</StyledLinkExternal>\r\n        <StyledLinkExternal href={info}>{TranslateString(999, 'See Pair Info')}</StyledLinkExternal>\r\n        <TagsContainer>\r\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\r\n          {dual ? <DualTag /> : null}\r\n        </TagsContainer>\r\n      </InfoContainer>\r\n      <ValueContainer>\r\n        <ValueWrapper>\r\n          <Text>{TranslateString(736, 'APR')}</Text>\r\n          <Apr {...apr} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{TranslateString(999, 'Multiplier')}</Text>\r\n          <Multiplier {...multiplier} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{TranslateString(999, 'Liquidity')}</Text>\r\n          <Liquidity {...liquidity} />\r\n        </ValueWrapper>\r\n      </ValueContainer>\r\n      <ActionContainer>\r\n        <HarvestAction {...farm} />\r\n        <StakedAction {...farm} />\r\n      </ActionContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Label = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  text-align: left;\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n  min-height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\ninterface CellLayoutProps {\r\n  label?: string\r\n}\r\n\r\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\r\n  return (\r\n    <div>\r\n      {label && <Label>{label}</Label>}\r\n      <ContentContainer>{children}</ContentContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CellLayout\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useMatchBreakpoints } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nimport Apr, { AprProps } from './Apr'\r\nimport Farm, { FarmProps } from './Farm'\r\nimport Earned, { EarnedProps } from './Earned'\r\nimport Details from './Details'\r\nimport Multiplier, { MultiplierProps } from './Multiplier'\r\nimport Liquidity, { LiquidityProps } from './Liquidity'\r\nimport ActionPanel from './Actions/ActionPanel'\r\nimport CellLayout from './CellLayout'\r\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\r\n\r\nexport interface RowProps {\r\n  apr: AprProps\r\n  farm: FarmProps\r\n  earned: EarnedProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n}\r\n\r\nconst cells = {\r\n  apr: Apr,\r\n  farm: Farm,\r\n  earned: Earned,\r\n  details: Details,\r\n  multiplier: Multiplier,\r\n  liquidity: Liquidity,\r\n}\r\n\r\nconst CellInner = styled.div`\r\n  padding: 24px 0px;\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  padding-right: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    padding-right: 32px;\r\n  }\r\n`\r\n\r\nconst StyledTr = styled.tr`\r\n  cursor: pointer;\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\r\n`\r\n\r\nconst EarnedMobileCell = styled.td`\r\n  padding: 16px 0 24px 16px;\r\n`\r\n\r\nconst AprMobileCell = styled.td`\r\n  padding-top: 16px;\r\n  padding-bottom: 24px;\r\n`\r\n\r\nconst FarmMobileCell = styled.td`\r\n  padding-top: 24px;\r\n`\r\n\r\nconst Row: React.FunctionComponent<RowProps> = (props) => {\r\n  const { details } = props\r\n  const [actionPanelToggled, setActionPanelToggled] = useState(false)\r\n  const TranslateString = useI18n()\r\n\r\n  const toggleActionPanel = () => {\r\n    setActionPanelToggled(!actionPanelToggled)\r\n  }\r\n\r\n  const { isXl, isXs } = useMatchBreakpoints()\r\n\r\n  const isMobile = !isXl\r\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\r\n  const columnNames = tableSchema.map((column) => column.name)\r\n\r\n  const handleRenderRow = () => {\r\n    if (!isXs) {\r\n      return (\r\n        <StyledTr onClick={toggleActionPanel}>\r\n          {Object.keys(props).map((key) => {\r\n            const columnIndex = columnNames.indexOf(key)\r\n            if (columnIndex === -1) {\r\n              return null\r\n            }\r\n\r\n            switch (key) {\r\n              case 'details':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout>\r\n                        <Details actionPanelToggled={actionPanelToggled} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              case 'apr':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={TranslateString(736, 'APR')}>\r\n                        <Apr {...props.apr} hideButton={isMobile} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              default:\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout\r\n                        label={TranslateString(tableSchema[columnIndex].translationId, tableSchema[columnIndex].label)}\r\n                      >\r\n                        {React.createElement(cells[key], props[key])}\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n            }\r\n          })}\r\n        </StyledTr>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <StyledTr onClick={toggleActionPanel}>\r\n        <td>\r\n          <tr>\r\n            <FarmMobileCell>\r\n              <CellLayout>\r\n                <Farm {...props.farm} />\r\n              </CellLayout>\r\n            </FarmMobileCell>\r\n          </tr>\r\n          <tr>\r\n            <EarnedMobileCell>\r\n              <CellLayout label={TranslateString(1072, 'Earned')}>\r\n                <Earned {...props.earned} />\r\n              </CellLayout>\r\n            </EarnedMobileCell>\r\n            <AprMobileCell>\r\n              <CellLayout label={TranslateString(736, 'APR')}>\r\n                <Apr {...props.apr} hideButton />\r\n              </CellLayout>\r\n            </AprMobileCell>\r\n          </tr>\r\n        </td>\r\n        <td>\r\n          <CellInner>\r\n            <CellLayout>\r\n              <Details actionPanelToggled={actionPanelToggled} />\r\n            </CellLayout>\r\n          </CellInner>\r\n        </td>\r\n      </StyledTr>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {handleRenderRow()}\r\n      {actionPanelToggled && details && (\r\n        <tr>\r\n          <td colSpan={6}>\r\n            <ActionPanel {...props} />\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nimport Row, { RowProps } from './Row'\r\n\r\nexport interface ITableProps {\r\n  data: RowProps[]\r\n  columns: ColumnType<RowProps>[]\r\n  sortColumn?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  filter: ${({ theme }) => theme.card.dropShadow};\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 16px;\r\n  margin: 16px 0px;\r\n`\r\n\r\nconst TableWrapper = styled.div`\r\n  overflow: visible;\r\n\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst StyledTable = styled.table`\r\n  border-collapse: collapse;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n`\r\n\r\nconst TableBody = styled.tbody`\r\n  & tr {\r\n    td {\r\n      font-size: 16px;\r\n      vertical-align: middle;\r\n    }\r\n  }\r\n`\r\n\r\nconst TableContainer = styled.div`\r\n  position: relative;\r\n}\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst FarmTable: React.FC<ITableProps> = (props) => {\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const TranslateString = useI18n()\r\n  const { data, columns } = props\r\n\r\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\r\n\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TableContainer>\r\n        <TableWrapper ref={tableWrapperEl}>\r\n          <StyledTable>\r\n            <TableBody>\r\n              {rows.map((row) => {\r\n                return <Row {...row.original} key={`table-row-${row.id}`} />\r\n              })}\r\n            </TableBody>\r\n          </StyledTable>\r\n        </TableWrapper>\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" onClick={scrollToTop}>\r\n            {TranslateString(999, 'To Top')}\r\n            <ChevronUpIcon color=\"primary\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </TableContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default FarmTable\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useRouteMatch, Link } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst FarmTabButtons = () => {\r\n  const { url, isExact } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ButtonMenu activeIndex={isExact ? 0 : 1} scale=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {TranslateString(1198, 'Live')}\r\n        </ButtonMenuItem>\r\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n          {TranslateString(388, 'Finished')}\r\n        </ButtonMenuItem>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  a {\r\n    padding-left: 12px;\r\n    padding-right: 12px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 16px;\r\n  }\r\n`\r\n","import React, { useState, useRef } from 'react'\r\nimport { Input } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\n\r\nconst StyledInput = styled(Input)`\r\n  border-radius: 16px;\r\n  margin-left: auto;\r\n`\r\n\r\nconst InputWrapper = styled.div`\r\n  position: relative;\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 234px;\r\n    display: block;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ toggled: boolean }>``\r\n\r\ninterface Props {\r\n  value: string\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst SearchInput: React.FC<Props> = ({ value, onChange }) => {\r\n  const [toggled, setToggled] = useState(false)\r\n  const inputEl = useRef(null)\r\n\r\n  return (\r\n    <Container toggled={toggled}>\r\n      <InputWrapper>\r\n        <StyledInput\r\n          ref={inputEl}\r\n          value={value}\r\n          onChange={onChange}\r\n          placeholder=\"Search farms\"\r\n          onBlur={() => setToggled(false)}\r\n        />\r\n      </InputWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default SearchInput\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap-libs/uikit'\r\nimport { ViewMode } from '../types'\r\n\r\ninterface ToogleViewProps {\r\n  viewMode: ViewMode\r\n  onToggle: (mode: ViewMode) => void\r\n}\r\n\r\nconst Container = styled.div`\r\n  margin-left: -8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 0;\r\n  }\r\n`\r\n\r\nconst ToggleView: React.FunctionComponent<ToogleViewProps> = ({ viewMode, onToggle }) => {\r\n  const handleToggle = (mode: ViewMode) => {\r\n    if (viewMode !== mode) {\r\n      onToggle(mode)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.CARD)}>\r\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.TABLE)}>\r\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ToggleView\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport { ArrowDropDownIcon, Text } from '@pancakeswap-libs/uikit'\r\n\r\nconst DropDownHeader = styled.div`\r\n  width: 100%;\r\n  height: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0px 16px;\r\n  box-shadow: ${({ theme }) => theme.shadows.inset};\r\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n  border-radius: 16px;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  transition: border-radius 0.15s;\r\n`\r\n\r\nconst DropDownListContainer = styled.div`\r\n  min-width: 136px;\r\n  height: 0;\r\n  position: absolute;\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n  transition: transform 0.15s, opacity 0.15s;\r\n  transform: scaleY(0);\r\n  transform-origin: top;\r\n  opacity: 0;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n`\r\n\r\nconst DropDownContainer = styled.div<{ isOpen: boolean; width: number; height: number }>`\r\n  cursor: pointer;\r\n  width: ${({ width }) => width}px;\r\n  position: relative;\r\n  background: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  height: 40px;\r\n  min-width: 136px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    min-width: 168px;\r\n  }\r\n\r\n  ${(props) =>\r\n    props.isOpen &&\r\n    css`\r\n      ${DropDownHeader} {\r\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n        border-radius: 16px 16px 0 0;\r\n      }\r\n\r\n      ${DropDownListContainer} {\r\n        height: auto;\r\n        transform: scaleY(1);\r\n        opacity: 1;\r\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\r\n        border-top-width: 0;\r\n        border-radius: 0 0 16px 16px;\r\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\r\n      }\r\n    `}\r\n\r\n  svg {\r\n    position: absolute;\r\n    right: 16px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n  }\r\n`\r\n\r\nconst DropDownList = styled.ul`\r\n  padding: 0;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\r\n`\r\n\r\nconst ListItem = styled.li`\r\n  list-style: none;\r\n  padding: 8px 16px;\r\n  &:hover {\r\n    background: ${({ theme }) => theme.colors.inputSecondary};\r\n  }\r\n`\r\n\r\nexport interface SelectProps {\r\n  options: OptionProps[]\r\n  onChange?: (option: OptionProps) => void\r\n}\r\n\r\nexport interface OptionProps {\r\n  label: string\r\n  value: any\r\n}\r\n\r\nconst Select: React.FunctionComponent<SelectProps> = ({ options, onChange }) => {\r\n  const containerRef = useRef(null)\r\n  const dropdownRef = useRef(null)\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [selectedOption, setSelectedOption] = useState(options[0])\r\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 })\r\n\r\n  const toggling = () => setIsOpen(!isOpen)\r\n\r\n  const onOptionClicked = (option: OptionProps) => () => {\r\n    setSelectedOption(option)\r\n    setIsOpen(false)\r\n\r\n    if (onChange) {\r\n      onChange(option)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    setContainerSize({\r\n      width: dropdownRef.current.offsetWidth, // Consider border\r\n      height: dropdownRef.current.offsetHeight,\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <DropDownContainer isOpen={isOpen} ref={containerRef} {...containerSize}>\r\n      {containerSize.width !== 0 && (\r\n        <DropDownHeader onClick={toggling}>\r\n          <Text>{selectedOption.label}</Text>\r\n        </DropDownHeader>\r\n      )}\r\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\r\n      <DropDownListContainer>\r\n        <DropDownList ref={dropdownRef}>\r\n          {options.map((option) =>\r\n            option.label !== selectedOption.label ? (\r\n              <ListItem onClick={onOptionClicked(option)} key={option.label}>\r\n                <Text>{option.label}</Text>\r\n              </ListItem>\r\n            ) : null,\r\n          )}\r\n        </DropDownList>\r\n      </DropDownListContainer>\r\n    </DropDownContainer>\r\n  )\r\n}\r\n\r\nexport default Select\r\n","import React, { useEffect, useCallback, useState } from 'react'\r\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Image, Heading, RowType, Toggle, Text } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd, usePriceEthBusd } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { orderBy } from 'lodash'\r\n\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport SearchInput from './components/SearchInput'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport ToggleView from './components/ToggleView/ToggleView'\r\nimport { DesktopColumnSchema, ViewMode } from './components/types'\r\nimport Select, { OptionProps } from './components/Select/Select'\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n`\r\n\r\nconst Header = styled.div`\r\n  padding: 32px 0px;\r\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\r\n\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 24px;\r\n    padding-right: 24px;\r\n  }\r\n`\r\n\r\nconst Farms: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = useState(ViewMode.TABLE)\r\n  const ethPriceUsd = usePriceEthBusd()\r\n  const { account } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('hot')\r\n\r\n  const dispatch = useDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const [stackedOnly, setStackedOnly] = useState(false)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\r\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X')\r\n\r\n  const stackedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n    switch (sortOption) {\r\n      case 'apr':\r\n        return orderBy(farms, 'apy', 'desc')\r\n      case 'multiplier':\r\n        return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.multiplier.slice(0, -1)), 'desc')\r\n      case 'earned':\r\n        return orderBy(farms, (farm: FarmWithStakedValue) => (farm.userData ? farm.userData.earnings : 0), 'desc')\r\n      case 'liquidity':\r\n        return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n      default:\r\n        return farms\r\n    }\r\n  }\r\n\r\n  // /!\\ This function will be removed soon\r\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\r\n  // to retrieve assets prices against USD\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay): FarmWithStakedValue[] => {\r\n      const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n      let farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.tokenAmount || !farm.lpTotalInQuoteToken) {\r\n          return farm\r\n        }\r\n        const cakeRewardPerBlock = CAKE_PER_BLOCK.times(farm.poolWeight)\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n\r\n        // cakePriceInQuote * cakeRewardPerYear / lpTotalInQuoteToken\r\n        let apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\r\n\r\n        if (farm.quoteTokenSymbol === QuoteToken.BUSD || farm.quoteTokenSymbol === QuoteToken.UST) {\r\n          apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken).times(bnbPrice)\r\n        } else if (farm.quoteTokenSymbol === QuoteToken.ETH) {\r\n          apy = cakePrice.div(ethPriceUsd).times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\r\n        } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n          apy = cakeRewardPerYear.div(farm.lpTotalInQuoteToken)\r\n        } else if (farm.dual) {\r\n          const cakeApy =\r\n            farm && cakePriceVsBNB.times(cakeRewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken)\r\n          const dualApy =\r\n            farm.tokenPriceVsQuote &&\r\n            new BigNumber(farm.tokenPriceVsQuote)\r\n              .times(farm.dual.rewardPerBlock)\r\n              .times(BLOCKS_PER_YEAR)\r\n              .div(farm.lpTotalInQuoteToken)\r\n\r\n          apy = cakeApy && dualApy && cakeApy.plus(dualApy)\r\n        }\r\n\r\n        let liquidity = farm.lpTotalInQuoteToken\r\n\r\n        if (!farm.lpTotalInQuoteToken) {\r\n          liquidity = null\r\n        }\r\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n          liquidity = bnbPrice.times(farm.lpTotalInQuoteToken)\r\n        }\r\n        if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n          liquidity = cakePrice.times(farm.lpTotalInQuoteToken)\r\n        }\r\n\r\n        if (farm.quoteTokenSymbol === QuoteToken.ETH) {\r\n          liquidity = ethPriceUsd.times(farm.lpTotalInQuoteToken)\r\n        }\r\n\r\n        return { ...farm, apy, liquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = query.toLowerCase()\r\n        farmsToDisplayWithAPY = farmsToDisplayWithAPY.filter((farm: FarmWithStakedValue) => {\r\n          if (farm.lpSymbol.toLowerCase().includes(lowercaseQuery)) {\r\n            return true\r\n          }\r\n\r\n          return false\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPY\r\n    },\r\n    [bnbPrice, farmsLP, query, cakePrice, ethPriceUsd],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const isActive = !pathname.includes('history')\r\n  let farmsStaked = []\r\n  if (isActive) {\r\n    farmsStaked = stackedOnly ? farmsList(stackedOnlyFarms) : farmsList(activeFarms)\r\n  } else {\r\n    farmsStaked = farmsList(inactiveFarms)\r\n  }\r\n\r\n  farmsStaked = sortFarms(farmsStaked)\r\n\r\n  const rowData = farmsStaked.map((farm) => {\r\n    const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses } = farm\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value:\r\n          farm.apy &&\r\n          farm.apy.times(new BigNumber(100)).toNumber().toLocaleString('en-US', { maximumFractionDigits: 2 }),\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        quoteTokenAdresses,\r\n        quoteTokenSymbol,\r\n        tokenAddresses,\r\n        cakePrice,\r\n        originalValue: farm.apy,\r\n      },\r\n      farm: {\r\n        image: farm.lpSymbol.split(' ')[0].toLocaleLowerCase(),\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n      },\r\n      earned: {\r\n        earnings: farm.userData ? getBalanceNumber(new BigNumber(farm.userData.earnings)) : null,\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} />\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {farmsStaked.map((farm) => (\r\n              <FarmCard\r\n                key={farm.pid}\r\n                farm={farm}\r\n                bnbPrice={bnbPrice}\r\n                cakePrice={cakePrice}\r\n                ethPrice={ethPriceUsd}\r\n                account={account}\r\n                removed={false}\r\n              />\r\n            ))}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsStaked.map((farm) => (\r\n              <FarmCard\r\n                key={farm.pid}\r\n                farm={farm}\r\n                bnbPrice={bnbPrice}\r\n                cakePrice={cakePrice}\r\n                ethPrice={ethPriceUsd}\r\n                account={account}\r\n                removed\r\n              />\r\n            ))}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header>\r\n        <Heading as=\"h1\" size=\"xxl\" color=\"secondary\" mb=\"24px\">\r\n          {TranslateString(999, 'Farms')}\r\n        </Heading>\r\n        <Heading size=\"lg\" color=\"text\">\r\n          {TranslateString(999, 'Stake Liquidity Pool (LP) tokens to earn.')}\r\n        </Heading>\r\n      </Header>\r\n      <Page>\r\n        <ControlContainer>\r\n          <ViewControls>\r\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n            <ToggleWrapper>\r\n              <Toggle checked={stackedOnly} onChange={() => setStackedOnly(!stackedOnly)} scale=\"sm\" />\r\n              <Text> {TranslateString(1116, 'Staked only')}</Text>\r\n            </ToggleWrapper>\r\n            <FarmTabButtons />\r\n          </ViewControls>\r\n          <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text>SORT BY</Text>\r\n              <Select\r\n                options={[\r\n                  {\r\n                    label: 'Hot',\r\n                    value: 'hot',\r\n                  },\r\n                  {\r\n                    label: 'APR',\r\n                    value: 'apr',\r\n                  },\r\n                  {\r\n                    label: 'Multiplier',\r\n                    value: 'multiplier',\r\n                  },\r\n                  {\r\n                    label: 'Earned',\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: 'Liquidity',\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text>SEARCH</Text>\r\n              <SearchInput onChange={handleChangeQuery} value={query} />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer>\r\n        {renderContent()}\r\n        <StyledImage src=\"/images/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} />\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"],"sourceRoot":""}